# Stage 1: Builder
FROM python:3.13-slim AS builder

# Create a working directory for the app
RUN mkdir /app

# Set the working directory for subsequent instructions
WORKDIR /app

# Copy the requirements.txt file into the container
COPY requirements.txt /app/

# Upgrade pip and install the dependencies listed in requirements.txt
# The `--no-cache-dir` flag prevents pip from caching the downloaded packages,
# reducing the final image size
RUN pip install --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Stage 2: Final Image
FROM python:3.13-slim

# Create a non-root user (`appuser`) and set ownership of the `/app` directory
# `-m` creates a home directory, and `-r` indicates a system user (non-interactive)
RUN useradd -m -r appuser && \
    mkdir /app && \
    chown -R appuser /app

# Copy the installed Python dependencies from the builder stage to the final image
COPY --from=builder /usr/local/lib/python3.13/site-packages/ /usr/local/lib/python3.13/site-packages/

# Copy executable binaries (like `pip`, `gunicorn`, etc.) from the builder stage
COPY --from=builder /usr/local/bin/ /usr/local/bin/

# Set the working directory for the application in the final image
WORKDIR /app

# Copy the application code into the container, set ownership to `appuser`
# This step ensures that only `appuser` has write access to the app code
COPY --chown=appuser:appuser . .

# Set environment variables to prevent Python from writing bytecode
# and to disable output buffering (useful for logging in production)
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Switch to the non-root user (`appuser`) for better security
USER appuser

# Expose port 8000 to the outside world (typically used by Gunicorn)
EXPOSE 8000

# Run the application using Gunicorn with 3 worker processes,
# binding to all IPs on port 8000
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "3", "main.wsgi:application"]
